# == Class: server::httpd::*
#
#   Installs Lighttpd
#
# === Authors
#   Colovic Vladan <cvladan@gmail.com>
#

class server::httpd ()
{
  # $pkgs = [ "php5-xdebug", "php5-memcache", "php5-curl", "php-apc", "phpmyadmin" ]
  # , 'memcached'
  #
  #
  #
  #
  #
  # package { $pkgs:
  #     ensure => installed,
  #     require => Class[ 'development::tools' ],
  #     before => Exec[ 'apache enable module' ]
  # }


  class { 'server::httpd::install': }
  class { 'server::httpd::service': }
  class { 'server::httpd::reload': }
  class { 'server::httpd::config': }

  Class[ 'server::httpd::install' ] ->
    Class['server::httpd::service'] ->
      Class['server::httpd::reload']

  Class[ 'server::httpd::install' ] ->
      Class['server::httpd::config']

  # # symlink

  # file { '/var/www/vagrant':
  #     ensure => 'link',
  #     owner => "vagrant",
  #     group => "vagrant",
  #     mode => 777,
  #     target => '/vagrant',
  #     require => Package[ 'lamp-server^' ],
  # }

  # class { 'server::vhosts': }

}

# Install package
#
class server::httpd::install {
  package { 'lighttpd':
    ensure => installed
  }
}

# Service class. For restarting and reloading.
#
class server::httpd::service {

  service { 'lighttpd':
    ensure => running,
    enable => true,
    # require => Class['server::httpd::install']
  }

}

class server::httpd::reload {

  exec { 'reload':
    command     => 'service lighttpd force-reload',
    refreshonly => true,
    onlyif      => 'lighttpd-angel -t -f /etc/lighttpd/lighttpd.conf',
    # require     => Class['server::httpd::service']
  }
}

class server::httpd::config {

  # two configuration files to enable php-fpm

  server::httpd::module { ['fastcgi', 'fastcgi-phpfpm']:
    ensure => 'present'
  }

  file { '15-fastcgi-phpfpm.conf':
    path    => '/etc/lighttpd/conf-available/15-fastcgi-phpfpm.conf',
    ensure  => present,
    owner   => root,
    group   => root,
    mode    => 0644,
    source  => 'puppet:///modules/server/lighttpd/15-fastcgi-phpfpm.conf',
  }

  Server::Httpd::Module['fastcgi'] ->
    File['15-fastcgi-phpfpm.conf'] ->
      Server::Httpd::Module['fastcgi-phpfpm']

  # Prepare directories for vhost support structure
  #   vhosts dir - autogenerated vhosts config files
  #   vhosts/conf-custom - symlinks to a custom config files from project directory
  #
  file { [ '/etc/lighttpd/vhosts', '/etc/lighttpd/vhosts/conf-custom' ]:
    ensure  => directory,
    owner   => root,
    group   => root,
    mode    => 0755
  }

  # Lighttpd will scan 'vhosts' dir and include every .conf from there
  # http://redmine.lighttpd.net/issues/1221
  #
  file { '20-projects-vhosts.conf':
    path    => '/etc/lighttpd/conf-available/20-projects-vhosts.conf',
    owner   => root,
    group   => root,
    mode    => 0644,
    content => "include_shell \"find vhosts -maxdepth 1 -name '*.conf' -exec cat {} \\;\"",
  }

  httpd::module { 'projects-vhosts':
    ensure => present,
    require => File['20-projects-vhosts.conf'],
  }

}

# Enable / disable any lighttpd module
# Using define, not a class, because it will be used multiple times.
#
define server::httpd::module ( $ensure = present )
{

  case $ensure {
    present: {
      exec {"enable ${name}":
        command => "lighty-enable-mod ${name}",
        unless  => "lighty-disable-mod - | grep -E 'Already enabled modules:.*?\s${name}\s+'",
        notify  => Class['server::httpd::reload']
      }
    }
    absent: {
      exec {"disable ${name}":
        command => "lighty-disable-mod ${name}",
        onlyif  => "lighty-disable-mod - | grep -E 'Already enabled modules:.*?\s${name}\s+'",
        notify  => Class['server::httpd::reload']
      }
    }
    default: {
      fail "Unknown \$ensure $ensure for $name"
    }
  }
}


